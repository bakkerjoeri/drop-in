!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function r(e){window.requestAnimationFrame(t=>{!function(e,t){e(t),r(e)}(e,t)})}n.r(t);const s={entities:{},sprites:{}};function i(e,...t){return e.filter(e=>!t.includes(e))}function o(...e){return e.reduce((e,t)=>n=>t(e(n)),e=>e)}const a=e=>t=>Object.assign(Object.assign({},t),{sprites:Object.assign(Object.assign({},t.sprites),{[e.name]:e})});function c(e,t){if(!e.sprites.hasOwnProperty(t))throw new Error(`No sprite with name ${t} found.`);return e.sprites[t]}function d(e,t,n,r=0){if(!e.frames[r])throw new Error(`Sprite ${e.name} does not have frame with index ${r}`);const s=e.frames[r],i=u(s.file);t.drawImage(i,s.origin.x,s.origin.y,s.size.width,s.size.height,n.x+e.offset.x,n.y+e.offset.y,s.size.width,s.size.height)}const h={};function u(e,t=!0){if(t&&h[e])return h[e];const n=new Image;return n.src=e,h[e]=n,n.onerror=()=>{throw delete h[e],new Error(`No image found at ${e}.`)},n}function l(e,t){for(let n=0;n<e;n+=1)t(n)}function f(e,t){const n=[];return l(e,e=>{n[e]=[],l(t,t=>{n[e][t]=null})}),n}var y=[{name:"arrow-left",frames:[{file:"src/assets/sprites/arrows.png",origin:{x:0,y:0},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"arrow-right",frames:[{file:"src/assets/sprites/arrows.png",origin:{x:8,y:0},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"coin-red",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:0},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"coin-blue",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:16},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"coin-yellow",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:32},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"coin-green",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:48},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"coin-purple",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:64},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"coin-white",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:80},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"coin-black",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:96},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"board-position-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:8,y:40},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"board-column-top-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:8,y:32},size:{width:16,height:8}}],offset:{x:0,y:0}},{name:"board-column-bottom-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:8,y:56},size:{width:16,height:8}}],offset:{x:0,y:0}},{name:"board-row-left-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:0,y:40},size:{width:8,height:16}}],offset:{x:0,y:0}},{name:"board-row-right-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:24,y:40},size:{width:8,height:16}}],offset:{x:0,y:0}},{name:"board-corner-top-left-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:0,y:32},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"board-corner-top-right-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:24,y:32},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"board-corner-bottom-right-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:24,y:56},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"board-corner-bottom-left-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:0,y:56},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"board-position-back",frames:[{file:"src/assets/sprites/board.png",origin:{x:8,y:8},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"board-column-top-back",frames:[{file:"src/assets/sprites/board.png",origin:{x:8,y:0},size:{width:16,height:8}}],offset:{x:0,y:0}},{name:"board-corner-top-left-back",frames:[{file:"src/assets/sprites/board.png",origin:{x:0,y:0},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"board-corner-top-right-back",frames:[{file:"src/assets/sprites/board.png",origin:{x:24,y:0},size:{width:8,height:8}}],offset:{x:0,y:0}}];function p(e){if(0===e.length)throw new Error("Cannot choose from 0 choices.");return e[(t=0,n=e.length-1,Math.floor(Math.random()*(n+1+t)))];var t,n}function g(e,t,n=!1){if(!n&&t>e.length)throw new Error(`Can't randomly pick ${t} items without putting them back from an array that's only ${e.length} long.`);const r=[];for(let s=0;s<t;s+=1){const t=p(e);r.push(t),n||(e=e.filter(e=>e!==t))}return r}function m(e,t,n,r,s,{color:i="#000000",align:o="start",baseline:a="alphabetic",direction:c="ltr"}={}){const d=function(e,t){b.hasOwnProperty(e)||(b[e]={});if(!b[e].hasOwnProperty(t)){b[e][t]=document.createElement("canvas");const n=b[e][t],r=n.getContext("2d");if(!r)throw new Error("Could not create context for font canvas. Perhaps this browser does not support the Canvas API.");const s=u(e);s.addEventListener("load",()=>{r.drawImage(s,0,0),r.globalCompositeOperation="source-in",r.fillStyle=t,r.fillRect(0,0,n.width,n.height)})}return b[e][t]}(r,i),h=s.size,l=function(e,t,n,r){const s={ltr:1,rtl:-1}[n];return e.split("\n").map(e=>{let n=0;return Array.from(e).reduce((e,i)=>{const o=i.charCodeAt(0),a=t.chars.indexOf(o),c=t.advance[a];if(32===o)return n=n+c*s+1*s,Object.assign(Object.assign({},e),{width:e.width+c+1});const d={x:t.pack_x[a],y:t.pack_y[a]},h={width:t.width[a],height:t.height[a]},u=t.offset_x[a],l=t.offset_y[a],f={x:n+u*s,y:l+x(t,r)};return n=n+c*s+1*s,Object.assign(Object.assign({},e),{width:e.width+c+1,characters:[...e.characters,{positionInAtlas:d,sizeInAtlas:h,positionInLine:f}]})},{width:0,characters:[]})})}(t,s,c,a),f=Math.max(...l.map(e=>e.width));l.forEach((t,r)=>{const s=function(e,t,n,r){if("center"===n)return(t-e)/2-t/2;if("right"===n||"start"===n&&"rtl"===r||"end"===n&&"ltr"===r)return-e;return 0}(t.width,f,o,c),i=r*h;t.characters.forEach(({positionInAtlas:t,positionInLine:r,sizeInAtlas:o})=>{e.drawImage(d,t.x,t.y,o.width,o.height,Math.round(n.x+s+r.x),Math.round(n.y+i+r.y),o.width,o.height)})})}const b={};function x(e,t){return"top"===t?e.ascent:"hanging"===t?e.ascent+e.descent:"middle"===t?(e.ascent+e.descent)/2:"bottom"===t?e.descent:0}var w={name:"ChevyRay - Bird Seed",size:10,ascent:7,descent:-2,char_count:95,kerning_count:60,chars:[32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126],advance:[2,1,3,5,5,6,6,1,2,2,3,5,2,5,1,6,5,5,5,5,5,5,5,5,5,5,1,2,6,5,6,5,6,6,6,6,6,6,6,7,6,5,6,6,5,7,6,6,6,6,6,7,7,6,7,7,7,7,7,2,6,2,5,5,2,5,5,5,5,5,5,5,5,3,2,5,3,7,5,5,5,5,5,5,5,5,5,7,5,5,5,3,1,3,6],offset_x:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],offset_y:[0,-7,-7,-6,-7,-6,-7,-7,-7,-7,-7,-6,-1,-4,-1,-6,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-5,-5,-6,-5,-6,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-6,-7,-7,-1,-7,-5,-7,-5,-8,-5,-7,-5,-7,-7,-7,-7,-7,-5,-5,-5,-5,-5,-5,-5,-7,-5,-5,-5,-5,-5,-5,-7,-7,-7,-4],width:[0,1,3,5,5,6,6,1,2,2,3,5,2,5,1,6,5,5,5,5,5,5,5,5,5,5,1,2,6,5,6,5,6,6,6,6,6,6,6,7,6,5,6,6,5,7,6,6,6,6,6,7,7,6,7,7,7,7,7,2,6,2,5,5,2,5,5,5,5,5,4,5,5,3,2,5,3,7,5,5,5,6,5,5,4,5,5,7,5,5,5,3,1,3,6],height:[0,7,2,6,7,6,7,2,7,7,4,6,2,2,1,6,7,7,7,7,7,7,7,7,7,7,5,6,6,4,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,7,7,7,7,7,7,7,7,7,7,6,7,4,1,2,5,7,5,8,5,7,7,7,7,10,7,7,5,5,5,7,7,5,5,7,5,5,5,5,7,5,7,7,7,3],pack_x:[0,0,0,2,0,0,6,4,0,0,8,12,6,0,8,3,7,3,6,0,9,13,13,13,0,0,10,18,0,6,6,6,12,15,19,19,19,0,0,0,7,12,13,19,22,7,14,18,20,26,26,26,33,26,28,33,34,41,0,0,7,0,28,20,9,3,3,3,8,8,9,9,14,15,14,19,14,17,20,21,25,27,21,25,33,36,36,41,42,48,49,27,15,15,27],pack_y:[0,0,8,0,11,19,7,7,26,34,0,0,15,42,5,26,18,33,41,45,33,7,15,23,53,61,26,0,69,49,54,61,41,31,7,15,23,76,84,92,69,61,49,39,31,77,69,57,47,0,39,9,0,17,25,17,8,0,100,108,85,116,33,55,15,108,114,122,92,101,107,115,85,77,93,77,104,93,85,65,57,47,71,77,38,25,31,16,8,8,0,65,112,120,73],kerning:[76,84,-1,76,89,-1,84,97,-1,84,99,-1,84,100,-1,84,101,-1,84,103,-1,84,109,-1,84,110,-1,84,111,-1,84,112,-1,84,113,-1,84,114,-1,84,115,-1,84,117,-1,84,118,-1,84,119,-1,84,120,-1,84,121,-1,84,122,-1,89,97,-1,89,99,-1,89,100,-1,89,101,-1,89,103,-1,89,109,-1,89,111,-1,89,113,-1,89,115,-1,97,84,-1,97,89,-1,98,84,-1,98,89,-1,99,84,-1,99,89,-1,101,84,-1,101,89,-1,103,84,-1,104,84,-1,104,89,-1,107,84,-1,109,84,-1,109,89,-1,110,84,-1,110,89,-1,111,84,-1,111,89,-1,112,84,-1,112,89,-1,113,84,-1,114,84,-1,114,89,-1,115,84,-1,115,89,-1,117,84,-1,118,84,-1,119,84,-1,120,84,-1,121,84,-1,122,84,-1]};const v={width:320,height:180},P=16,O=16,S={width:8,height:6},j=["boardHeight","boardWidth","amountOfPlayers","connectToWin","startRound"],z=["red","blue","yellow","green","purple","white","black"],k=new class{constructor(){this.eventHandlers={},this.on=this.on.bind(this),this.emit=this.emit.bind(this),this.remove=this.remove.bind(this),this.removeAll=this.removeAll.bind(this)}on(e,t){this.eventHandlers=Object.assign(Object.assign({},this.eventHandlers),{[e]:[...this.eventHandlers[e]||[],t]})}remove(e,t){this.eventHandlers=Object.assign(Object.assign({},this.eventHandlers),{[e]:i(this.eventHandlers[e],t)})}removeAll(e){this.eventHandlers=function(e,...t){return Object.entries(e).reduce((e,[n,r])=>t.includes(n)?e:Object.assign(Object.assign({},e),{[n]:r}),{})}(this.eventHandlers,e)}emit(e,t,n){if(!this.eventHandlers.hasOwnProperty(e))return t;return this.eventHandlers[e].reduce((e,t)=>t(e,n,{on:this.on,emit:this.emit,remove:this.remove,removeAll:this.removeAll}),t)}},E=new class{constructor(e,t,{initialState:n=s,containerSelector:r="body"}={}){this.eventEmitter=t;const{canvas:i,context:o}=function(e,t){const n=document.createElement("canvas"),r=n.getContext("2d",{alpha:!1});if(!r)throw new Error("Couldn't create context from canvas");const s=document.documentElement.querySelector(e);if(!s)throw new Error(`Couldn't find element with selector ${e} to mount canvas on.`);return s.appendChild(n),n.setAttribute("width",t.width.toString()),n.setAttribute("height",t.height.toString()),n.style.width="100%",n.style.height="100%",n.style.objectFit="contain",n.style.display="block",n.style.imageRendering="-moz-crisp-edges",n.style.imageRendering="-webkit-crisp-edges",n.style.imageRendering="pixelated",{context:r,canvas:n}}(r,e);this.canvas=i,this.context=o,this.state=Object.assign({},n)}start(){this.state=this.eventEmitter.emit("start",this.state,{}),r(e=>{this.state=this.eventEmitter.emit("beforeUpdate",this.state,{time:e}),this.state=this.eventEmitter.emit("update",this.state,{time:e}),this.state=this.eventEmitter.emit("afterUpdate",this.state,{time:e}),this.state=this.eventEmitter.emit("beforeDraw",this.state,{time:e,context:this.context}),this.state=this.eventEmitter.emit("draw",this.state,{time:e,context:this.context}),this.state=this.eventEmitter.emit("afterDraw",this.state,{time:e,context:this.context})})}}(v,k,{initialState:Object.assign(Object.assign({},s),{game:{isPhaseNew:!0,phase:null,nextPhase:"settingUpGame"},setup:{boardWidth:S.width,boardHeight:S.height,amountOfPlayers:2,connectToWin:4,currentlySelectedStep:j[0]},round:{isPhaseNew:!0,phase:null,nextPhase:"start",gameBoard:null,boardSize:S,connectToWin:4,players:[],currentPlayer:null,positionToPlacePiece:0,winner:null}}),containerSelector:".game"});function K(e,t,n=1){return((e+n)%t+t)%t}function T(e){return{x:v.width/2-e.width/2*P,y:40}}function W(e,t,n,r="left",s){m(n,e,t,"/src/assets/fonts/BirdSeed/atlas.png",w,{align:r,baseline:"top",color:s})}new class{constructor(e){this.pressedKeys=[],this.activeKeys=[],this.releasedKeys=[],this.eventEmitter=e,window.addEventListener("keydown",e=>{const t=e.key.toLowerCase();this.isKeyPressed(t)||this.isKeyDown(t)||(this.pressedKeys=[...this.pressedKeys,t]),this.isKeyDown(t)||(this.activeKeys=[...this.activeKeys,t])}),window.addEventListener("keyup",e=>{const t=e.key.toLowerCase();this.isKeyDown(t)&&(this.activeKeys=i(this.activeKeys,t)),this.isKeyReleased(t)||(this.releasedKeys=[...this.releasedKeys,t])}),window.addEventListener("blur",this.resetAllKeys.bind(this)),this.eventEmitter.on("update",(e,{})=>(this.pressedKeys.forEach(t=>{e=this.eventEmitter.emit("keyPressed",e,{key:t})}),this.activeKeys.forEach(t=>{e=this.eventEmitter.emit("keyDown",e,{key:t})}),this.releasedKeys.forEach(t=>{e=this.eventEmitter.emit("keyUp",e,{key:t})}),e)),this.eventEmitter.on("afterUpdate",e=>(this.resetPressedKeys(),this.resetReleasedKeys(),e))}isKeyPressed(e){return this.pressedKeys.includes(e)}isKeyDown(e){return this.activeKeys.includes(e)}isKeyReleased(e){return this.releasedKeys.includes(e)}resetPressedKeys(){this.pressedKeys=[]}resetActiveKeys(){this.activeKeys=[]}resetReleasedKeys(){this.releasedKeys=[]}resetAllKeys(){this.resetPressedKeys(),this.resetActiveKeys(),this.resetReleasedKeys()}}(k),k.on("start",e=>{return(t=y,e=>o(...t.map(a))(e))(e);var t}),k.on("beforeUpdate",e=>(null!==e.game.nextPhase?(e.game.phase=e.game.nextPhase,e.game.nextPhase=null,e.game.isPhaseNew=!0):e.game.isPhaseNew=!1,null!==e.round.nextPhase?(e.round.phase=e.round.nextPhase,e.round.nextPhase=null,e.round.isPhaseNew=!0):e.round.isPhaseNew=!1,e)),k.on("update",e=>"settingUpGame"===e.game.phase?function(e){if(e.game.isPhaseNew)return e.setup.currentlySelectedStep=j[0],e;return e}(e):"playingRound"===e.game.phase?function(e){if("start"===e.round.phase)return function(e){return e.round.gameBoard=function(e,t){return{isGameBoard:!0,tiles:f(e,t)}}(e.round.boardSize.width,e.round.boardSize.height),e.round.currentPlayer=p(e.round.players),e.round.positionToPlacePiece=Math.floor((e.round.boardSize.width-1)/2),e.round.nextPhase="startTurn",e}(e);if("startTurn"===e.round.phase)return function(e){return e.round.nextPhase="decideMove",e}(e);if("endTurn"===e.round.phase)return function(e){const t=e.round.gameBoard,n=function(e,t=4){for(let n=0;n<e.length;n+=1)for(let r=0;r<e[n].length;r+=1){const s=e[n][r];if(null===s)continue;const i=[...new Array(t).keys()];if(i.every(t=>e[n]&&e[n][r+t]===s))return s;if(i.every(t=>e[n+t]&&e[n+t][r]===s))return s;if(i.every(t=>e[n+t]&&e[n+t][r+t]===s))return s;if(i.every(t=>e[n+t]&&e[n+t][r-t]===s))return s}return null}(t.tiles,e.round.connectToWin);if(n)return Object.assign(Object.assign({},e),{round:Object.assign(Object.assign({},e.round),{winner:n,nextPhase:"end"})});if(r=t.tiles,r.every(e=>e.every(e=>null!==e)))return Object.assign(Object.assign({},e),{round:Object.assign(Object.assign({},e.round),{nextPhase:"end"})});var r;const s=e.round.currentPlayer,i=K(e.round.players.indexOf(s),e.round.players.length),o=e.round.players[i];return Object.assign(Object.assign({},e),{round:Object.assign(Object.assign({},e.round),{currentPlayer:o,nextPhase:"startTurn"})})}(e);return e}(e):e),k.on("keyPressed",(e,{key:t},{emit:n})=>{if("playingRound"!==e.game.phase||"decideMove"!==e.round.phase)return e;const r=parseInt(t);if(!("number"==typeof r&&!isNaN(r))||!(r>=1&&r<=e.round.boardSize.width))return e;const s=e.round.gameBoard,i=r-1,o=s.tiles[i];let a=0,c=o[a];for(;null===c&&a<=o.length-1;)a+=1,c=o[a];return 0===a?e:(s.tiles[i][a-1]=e.round.currentPlayer,Object.assign(Object.assign({},e),{round:Object.assign(Object.assign({},e.round),{gameBoard:s,nextPhase:"endTurn"})}))}),k.on("keyPressed",(e,{key:t},{emit:n})=>("playingRound"!==e.game.phase||"decideMove"!==e.round.phase||("arrowright"!==t&&"d"!==t||(e.round.positionToPlacePiece=Math.min(e.round.boardSize.width-1,e.round.positionToPlacePiece+1)),"arrowleft"!==t&&"a"!==t||(e.round.positionToPlacePiece=Math.max(0,e.round.positionToPlacePiece-1))),e)),k.on("keyPressed",(e,{key:t},{emit:n})=>{if("playingRound"!==e.game.phase||"decideMove"!==e.round.phase)return e;if("arrowdown"===t||"s"===t){const t=e.round.gameBoard,n=e.round.positionToPlacePiece,r=t.tiles[e.round.positionToPlacePiece];let s=0,i=r[s];for(;null===i&&s<=r.length-1;)s+=1,i=r[s];return 0===s?e:(t.tiles[n][s-1]=e.round.currentPlayer,Object.assign(Object.assign({},e),{round:Object.assign(Object.assign({},e.round),{gameBoard:t,nextPhase:"endTurn"})}))}return e}),k.on("keyPressed",(e,{key:t})=>{if("settingUpGame"!==e.game.phase)return e;const n=j.indexOf(e.setup.currentlySelectedStep);if("arrowup"===t||"w"===t){const t=K(n,j.length,-1);e.setup.currentlySelectedStep=j[t]}if("arrowright"!==t&&"d"!==t||("amountOfPlayers"===e.setup.currentlySelectedStep&&(e.setup.amountOfPlayers=Math.min(7,e.setup.amountOfPlayers+1)),"boardWidth"===e.setup.currentlySelectedStep&&(e.setup.boardWidth=Math.min(18,e.setup.boardWidth+1)),"boardHeight"===e.setup.currentlySelectedStep&&(e.setup.boardHeight=Math.min(8,e.setup.boardHeight+1)),"connectToWin"===e.setup.currentlySelectedStep&&(e.setup.connectToWin=Math.min(8,e.setup.connectToWin+1))),"arrowdown"===t||"s"===t){const t=K(n,j.length,1);e.setup.currentlySelectedStep=j[t]}return"arrowleft"!==t&&"a"!==t||("amountOfPlayers"===e.setup.currentlySelectedStep&&(e.setup.amountOfPlayers=Math.max(2,e.setup.amountOfPlayers-1)),"boardWidth"===e.setup.currentlySelectedStep&&(e.setup.boardWidth=Math.max(2,e.setup.boardWidth-1)),"boardHeight"===e.setup.currentlySelectedStep&&(e.setup.boardHeight=Math.max(4,e.setup.boardHeight-1)),"connectToWin"===e.setup.currentlySelectedStep&&(e.setup.connectToWin=Math.max(3,e.setup.connectToWin-1))),"enter"===t&&"startRound"===e.setup.currentlySelectedStep?(e.game.nextPhase="playingRound",e.round.nextPhase="start",e.round=Object.assign(Object.assign({},e.round),{boardSize:{width:e.setup.boardWidth,height:e.setup.boardHeight},players:g(z,e.setup.amountOfPlayers),connectToWin:e.setup.connectToWin}),e):e}),k.on("keyPressed",(e,{key:t})=>"playingRound"!==e.game.phase||"end"!==e.round.phase?e:"r"===t?(e.round.nextPhase="start",e):"q"===t?(e.game.nextPhase="settingUpGame",e):e),k.on("draw",(e,{context:t})=>(t.clearRect(0,0,v.width,v.height),t.fillStyle="#D7D0FF",t.fillRect(0,0,v.width,v.height),e)),k.on("draw",(e,t)=>("settingUpGame"===e.game.phase&&function(e,{context:t}){W("Set up\na new game",{x:v.width/2,y:28},t,"center"),W("Board",{x:150,y:68},t,"right"),W(e.setup.boardHeight+" rows",{x:172,y:68},t),"boardHeight"===e.setup.currentlySelectedStep&&(e.setup.boardHeight>4&&d(c(e,"arrow-left"),t,{x:160,y:68}),e.setup.boardHeight<8&&d(c(e,"arrow-right"),t,{x:230,y:68}));W(e.setup.boardWidth+" columns",{x:172,y:78},t),"boardWidth"===e.setup.currentlySelectedStep&&(e.setup.boardWidth>2&&d(c(e,"arrow-left"),t,{x:160,y:78}),e.setup.boardWidth<18&&d(c(e,"arrow-right"),t,{x:230,y:78}));W("Who's playing?",{x:150,y:98},t,"right"),W(e.setup.amountOfPlayers+" players",{x:172,y:98},t),"amountOfPlayers"===e.setup.currentlySelectedStep&&(e.setup.amountOfPlayers>2&&d(c(e,"arrow-left"),t,{x:160,y:98}),e.setup.amountOfPlayers<7&&d(c(e,"arrow-right"),t,{x:230,y:98}));W("How many to win?",{x:150,y:118},t,"right"),W("connect "+e.setup.connectToWin,{x:172,y:118},t),"connectToWin"===e.setup.currentlySelectedStep&&(e.setup.connectToWin>3&&d(c(e,"arrow-left"),t,{x:160,y:118}),e.setup.connectToWin<8&&d(c(e,"arrow-right"),t,{x:230,y:118}));W("start",{x:172,y:138},t),"startRound"===e.setup.currentlySelectedStep&&d(c(e,"arrow-right"),t,{x:160,y:138})}(e,t),"playingRound"===e.game.phase&&function(e,t){const n=e.round.gameBoard;(function(e,t,n){const r=T(n.round.boardSize);e.tiles.forEach((s,i)=>{s.forEach((o,a)=>{const h={x:r.x+i*P,y:r.y+a*O};d(c(n,"board-position-back"),t,h),0===a&&d(c(n,"board-column-top-front"),t,{x:h.x,y:h.y-8}),a===s.length-1&&d(c(n,"board-column-bottom-front"),t,{x:h.x,y:h.y+O}),0===i&&d(c(n,"board-row-left-front"),t,{x:h.x-8,y:h.y}),i===e.tiles.length-1&&d(c(n,"board-row-right-front"),t,{x:h.x+P,y:h.y}),0===i&&0===a&&d(c(n,"board-corner-top-left-front"),t,{x:h.x-8,y:h.y-8}),i===e.tiles.length-1&&0===a&&d(c(n,"board-corner-top-right-front"),t,{x:h.x+P,y:h.y-8}),i===e.tiles.length-1&&a===s.length-1&&d(c(n,"board-corner-bottom-right-front"),t,{x:h.x+P,y:h.y+O}),0===i&&a===s.length-1&&d(c(n,"board-corner-bottom-left-front"),t,{x:h.x-8,y:h.y+O})})})})(n,t.context,e),function(e,t,n){const r=T(n.round.boardSize);e.tiles.forEach((e,s)=>{e.forEach((e,i)=>{const o={x:r.x+s*P,y:r.y+i*O};null!==e&&d(c(n,"coin-"+e),t,o)})})}(n,t.context,e),function(e,t,n){const r=T(n.round.boardSize);e.tiles.forEach((s,i)=>{s.forEach((s,o)=>{const a={x:r.x+i*P,y:r.y+o*O};d(c(n,"board-position-front"),t,a),0===o&&d(c(n,"board-column-top-back"),t,{x:a.x,y:a.y-8}),0===i&&0===o&&d(c(n,"board-corner-top-left-back"),t,{x:a.x-8,y:a.y-8}),i===e.tiles.length-1&&0===o&&d(c(n,"board-corner-top-right-back"),t,{x:a.x+P,y:a.y-8})})})}(n,t.context,e),"decideMove"===e.round.phase&&function(e,{context:t}){const n=T(e.round.boardSize);d(c(e,"coin-"+e.round.currentPlayer),t,{x:n.x+e.round.positionToPlacePiece*P,y:n.y-Math.floor(1.5*O)})}(e,t);"end"===e.round.phase&&function(e,{context:t}){e.round.winner?(d(c(e,"coin-"+e.round.winner),t,{x:v.width/2-P/2-12,y:4}),W("wins!",{x:v.width/2-2,y:8},t)):W("tie...",{x:v.width/2+.5,y:8},t,"center");W("q: set up new game | r: rematch",{x:v.width/2+.5,y:24},t,"center")}(e,t)}(e,t),e)),E.start()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,