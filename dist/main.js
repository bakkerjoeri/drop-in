!function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";function n(e){window.requestAnimationFrame(t=>{!function(e,t){e(t),n(e)}(e,t)})}r.r(t);const s={entities:{},sprites:{}};function i(e,...t){return e.filter(e=>!t.includes(e))}const o=e=>t=>Object.assign(Object.assign({},t),{sprites:Object.assign(Object.assign({},t.sprites),{[e.name]:e})});function a(e,t){if(!e.sprites.hasOwnProperty(t))throw new Error(`No sprite with name ${t} found.`);return e.sprites[t]}function d(e,t,r,n=0,{scale:s=1}={}){if(!e.frames[n])throw new Error(`Sprite ${e.name} does not have frame with index ${n}`);const i=e.frames[n],o=function(e,t=!0){if(t&&c[e])return c[e];const r=new Image;return r.src=e,c[e]=r,r.onerror=()=>{throw delete c[e],new Error(`No image found at ${e}.`)},r}(i.file);t.drawImage(o,i.origin.x,i.origin.y,i.size.width,i.size.height,(r.x+e.offset.x)*s,(r.y+e.offset.y)*s,i.size.width*s,i.size.height*s)}const c={};function h(e,t){for(let r=0;r<e;r+=1)t(r)}function u(e,t){const r=[];return h(e,e=>{r[e]=[],h(t,t=>{r[e][t]=null})}),r}var l=[{name:"arrow-left",frames:[{file:"src/assets/sprites/arrows.png",origin:{x:0,y:0},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"arrow-right",frames:[{file:"src/assets/sprites/arrows.png",origin:{x:8,y:0},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"coin-red",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:0},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"coin-blue",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:16},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"coin-yellow",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:32},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"coin-green",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:48},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"coin-purple",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:64},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"coin-white",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:80},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"coin-black",frames:[{file:"src/assets/sprites/coins.png",origin:{x:0,y:96},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"board-position-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:8,y:40},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"board-column-top-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:8,y:32},size:{width:16,height:8}}],offset:{x:0,y:0}},{name:"board-column-bottom-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:8,y:56},size:{width:16,height:8}}],offset:{x:0,y:0}},{name:"board-row-left-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:0,y:40},size:{width:8,height:16}}],offset:{x:0,y:0}},{name:"board-row-right-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:24,y:40},size:{width:8,height:16}}],offset:{x:0,y:0}},{name:"board-corner-top-left-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:0,y:32},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"board-corner-top-right-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:24,y:32},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"board-corner-bottom-right-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:24,y:56},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"board-corner-bottom-left-front",frames:[{file:"src/assets/sprites/board.png",origin:{x:0,y:56},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"board-position-back",frames:[{file:"src/assets/sprites/board.png",origin:{x:8,y:8},size:{width:16,height:16}}],offset:{x:0,y:0}},{name:"board-column-top-back",frames:[{file:"src/assets/sprites/board.png",origin:{x:8,y:0},size:{width:16,height:8}}],offset:{x:0,y:0}},{name:"board-corner-top-left-back",frames:[{file:"src/assets/sprites/board.png",origin:{x:0,y:0},size:{width:8,height:8}}],offset:{x:0,y:0}},{name:"board-corner-top-right-back",frames:[{file:"src/assets/sprites/board.png",origin:{x:24,y:0},size:{width:8,height:8}}],offset:{x:0,y:0}}];function f(e){if(0===e.length)throw new Error("Cannot choose from 0 choices.");return e[(t=0,r=e.length-1,Math.floor(Math.random()*(r+1+t)))];var t,r}function y(e,t,r=!1){if(t>e.length)throw new Error(`Can't randomly pick ${t} items from an array that's only ${e.length} long.`);const n=[];return h(t,()=>{const t=f(e);n.push(t),r||(e=e.filter(e=>e!==t))}),n}const p={width:320,height:180},g=16,m=16,b={width:8,height:6},x=["boardHeight","boardWidth","amountOfPlayers","connectToWin","startRound"],w=["red","blue","yellow","green","purple","white","black"],P=new class{constructor(){this.eventHandlers={},this.on=this.on.bind(this),this.emit=this.emit.bind(this),this.remove=this.remove.bind(this),this.removeAll=this.removeAll.bind(this)}on(e,t){this.eventHandlers=Object.assign(Object.assign({},this.eventHandlers),{[e]:[...this.eventHandlers[e]||[],t]})}remove(e,t){this.eventHandlers=Object.assign(Object.assign({},this.eventHandlers),{[e]:i(this.eventHandlers[e],t)})}removeAll(e){this.eventHandlers=function(e,...t){return Object.entries(e).reduce((e,[r,n])=>t.includes(r)?e:Object.assign(Object.assign({},e),{[r]:n}),{})}(this.eventHandlers,e)}emit(e,t,r){if(!this.eventHandlers.hasOwnProperty(e))return t;return this.eventHandlers[e].reduce((e,t)=>t(e,r,{on:this.on,emit:this.emit,remove:this.remove,removeAll:this.removeAll}),t)}},v=new class{constructor(e,t,{initialState:r=s,containerSelector:n="body"}={}){this.eventEmitter=t;const{canvas:i,context:o}=function(e,t){const r=document.createElement("canvas"),n=r.getContext("2d",{alpha:!1});if(!n)throw new Error("Couldn't create context from canvas");const s=document.documentElement.querySelector(e);if(!s)throw new Error(`Couldn't find element with selector ${e} to mount canvas on.`);return s.appendChild(r),r.setAttribute("width",t.width.toString()),r.setAttribute("height",t.height.toString()),r.style.width="100%",r.style.height="100%",r.style.objectFit="contain",r.style.display="block",r.style.imageRendering="-moz-crisp-edges",r.style.imageRendering="-webkit-crisp-edges",r.style.imageRendering="pixelated",{context:n,canvas:r}}(n,e);this.canvas=i,this.context=o,this.state=Object.assign({},r)}start(){this.state=this.eventEmitter.emit("start",this.state,{}),n(e=>{this.state=this.eventEmitter.emit("beforeUpdate",this.state,{time:e}),this.state=this.eventEmitter.emit("update",this.state,{time:e}),this.state=this.eventEmitter.emit("afterUpdate",this.state,{time:e}),this.state=this.eventEmitter.emit("beforeDraw",this.state,{time:e,context:this.context}),this.state=this.eventEmitter.emit("draw",this.state,{time:e,context:this.context}),this.state=this.eventEmitter.emit("afterDraw",this.state,{time:e,context:this.context})})}}(p,P,{initialState:Object.assign(Object.assign({},s),{game:{isPhaseNew:!0,phase:null,nextPhase:"settingUpGame"},setup:{boardWidth:b.width,boardHeight:b.height,amountOfPlayers:2,connectToWin:4,currentlySelectedStep:x[0]},round:{isPhaseNew:!0,phase:null,nextPhase:"start",gameBoard:null,boardSize:b,connectToWin:4,players:[],currentPlayer:null,positionToPlacePiece:0,winner:null}}),containerSelector:".game"});function S(e,t,r=1){return((e+r)%t+t)%t}function O(e){return{x:p.width/2-e.width/2*g,y:40}}function j(e,t,r,n="left",s="#000000"){r.textAlign=n,r.textBaseline="top",r.fillStyle=s,r.font="10px BirdSeed-Regular",r.fillText(e,t.x,t.y)}new class{constructor(e){this.pressedKeys=[],this.activeKeys=[],this.releasedKeys=[],this.eventEmitter=e,window.addEventListener("keydown",e=>{const t=e.key.toLowerCase();this.isKeyPressed(t)||this.isKeyDown(t)||(this.pressedKeys=[...this.pressedKeys,t]),this.isKeyDown(t)||(this.activeKeys=[...this.activeKeys,t])}),window.addEventListener("keyup",e=>{const t=e.key.toLowerCase();this.isKeyDown(t)&&(this.activeKeys=i(this.activeKeys,t)),this.isKeyReleased(t)||(this.releasedKeys=[...this.releasedKeys,t])}),window.addEventListener("blur",this.resetAllKeys.bind(this)),this.eventEmitter.on("update",(e,{})=>(this.pressedKeys.forEach(t=>{e=this.eventEmitter.emit("keyPressed",e,{key:t})}),this.activeKeys.forEach(t=>{e=this.eventEmitter.emit("keyDown",e,{key:t})}),this.releasedKeys.forEach(t=>{e=this.eventEmitter.emit("keyUp",e,{key:t})}),e)),this.eventEmitter.on("afterUpdate",e=>(this.resetPressedKeys(),this.resetReleasedKeys(),e))}isKeyPressed(e){return this.pressedKeys.includes(e)}isKeyDown(e){return this.activeKeys.includes(e)}isKeyReleased(e){return this.releasedKeys.includes(e)}resetPressedKeys(){this.pressedKeys=[]}resetActiveKeys(){this.activeKeys=[]}resetReleasedKeys(){this.releasedKeys=[]}resetAllKeys(){this.resetPressedKeys(),this.resetActiveKeys(),this.resetReleasedKeys()}}(P),P.on("start",e=>{return(t=l,e=>function(...e){return e.reduce((e,t)=>r=>t(e(r)),e=>e)}(...t.map(o))(e))(e);var t}),P.on("beforeUpdate",e=>(null!==e.game.nextPhase?(e.game.phase=e.game.nextPhase,e.game.nextPhase=null,e.game.isPhaseNew=!0):e.game.isPhaseNew=!1,null!==e.round.nextPhase?(e.round.phase=e.round.nextPhase,e.round.nextPhase=null,e.round.isPhaseNew=!0):e.round.isPhaseNew=!1,e)),P.on("update",e=>"settingUpGame"===e.game.phase?function(e){if(e.game.isPhaseNew)return e.setup.currentlySelectedStep=x[0],e;return e}(e):"playingRound"===e.game.phase?function(e){if("start"===e.round.phase)return function(e){return e.round.gameBoard=function(e,t){return{isGameBoard:!0,tiles:u(e,t)}}(e.round.boardSize.width,e.round.boardSize.height),e.round.currentPlayer=f(e.round.players),e.round.positionToPlacePiece=Math.floor((e.round.boardSize.width-1)/2),e.round.nextPhase="startTurn",e}(e);if("startTurn"===e.round.phase)return function(e){return e.round.nextPhase="decideMove",e}(e);if("endTurn"===e.round.phase)return function(e){const t=function(e,t=4){for(let r=0;r<e.length;r+=1)for(let n=0;n<e[r].length;n+=1){const s=e[r][n];if(null===s)continue;const i=[...new Array(t).keys()];if(i.every(t=>e[r]&&e[r][n+t]===s))return s;if(i.every(t=>e[r+t]&&e[r+t][n]===s))return s;if(i.every(t=>e[r+t]&&e[r+t][n+t]===s))return s;if(i.every(t=>e[r+t]&&e[r+t][n-t]===s))return s}return null}(e.round.gameBoard.tiles,e.round.connectToWin);if(t)return Object.assign(Object.assign({},e),{round:Object.assign(Object.assign({},e.round),{winner:t,nextPhase:"end"})});const r=e.round.currentPlayer,n=S(e.round.players.indexOf(r),e.round.players.length),s=e.round.players[n];return Object.assign(Object.assign({},e),{round:Object.assign(Object.assign({},e.round),{currentPlayer:s,nextPhase:"startTurn"})})}(e);return e}(e):e),P.on("keyPressed",(e,{key:t},{emit:r})=>{if("playingRound"!==e.game.phase||"decideMove"!==e.round.phase)return e;const n=parseInt(t);if(!("number"==typeof n&&!isNaN(n))||!(n>=1&&n<=e.round.boardSize.width))return e;const s=e.round.gameBoard,i=n-1,o=s.tiles[i];let a=0,d=o[a];for(;null===d&&a<=o.length-1;)a+=1,d=o[a];return 0===a?e:(s.tiles[i][a-1]=e.round.currentPlayer,Object.assign(Object.assign({},e),{round:Object.assign(Object.assign({},e.round),{gameBoard:s,nextPhase:"endTurn"})}))}),P.on("keyPressed",(e,{key:t},{emit:r})=>("playingRound"!==e.game.phase||"decideMove"!==e.round.phase||("arrowright"!==t&&"d"!==t||(e.round.positionToPlacePiece=Math.min(e.round.boardSize.width-1,e.round.positionToPlacePiece+1)),"arrowleft"!==t&&"a"!==t||(e.round.positionToPlacePiece=Math.max(0,e.round.positionToPlacePiece-1))),e)),P.on("keyPressed",(e,{key:t},{emit:r})=>{if("playingRound"!==e.game.phase||"decideMove"!==e.round.phase)return e;if("arrowdown"===t||"s"===t){const t=e.round.gameBoard,r=e.round.positionToPlacePiece,n=t.tiles[e.round.positionToPlacePiece];let s=0,i=n[s];for(;null===i&&s<=n.length-1;)s+=1,i=n[s];return 0===s?e:(t.tiles[r][s-1]=e.round.currentPlayer,Object.assign(Object.assign({},e),{round:Object.assign(Object.assign({},e.round),{gameBoard:t,nextPhase:"endTurn"})}))}return e}),P.on("keyPressed",(e,{key:t})=>{if("settingUpGame"!==e.game.phase)return e;const r=x.indexOf(e.setup.currentlySelectedStep);if("arrowup"===t||"w"===t){const t=S(r,x.length,-1);e.setup.currentlySelectedStep=x[t]}if("arrowright"!==t&&"d"!==t||("amountOfPlayers"===e.setup.currentlySelectedStep&&(e.setup.amountOfPlayers=Math.min(7,e.setup.amountOfPlayers+1)),"boardWidth"===e.setup.currentlySelectedStep&&(e.setup.boardWidth=Math.min(18,e.setup.boardWidth+1)),"boardHeight"===e.setup.currentlySelectedStep&&(e.setup.boardHeight=Math.min(8,e.setup.boardHeight+1)),"connectToWin"===e.setup.currentlySelectedStep&&(e.setup.connectToWin=Math.min(8,e.setup.connectToWin+1))),"arrowdown"===t||"s"===t){const t=S(r,x.length,1);e.setup.currentlySelectedStep=x[t]}return"arrowleft"!==t&&"a"!==t||("amountOfPlayers"===e.setup.currentlySelectedStep&&(e.setup.amountOfPlayers=Math.max(2,e.setup.amountOfPlayers-1)),"boardWidth"===e.setup.currentlySelectedStep&&(e.setup.boardWidth=Math.max(2,e.setup.boardWidth-1)),"boardHeight"===e.setup.currentlySelectedStep&&(e.setup.boardHeight=Math.max(4,e.setup.boardHeight-1)),"connectToWin"===e.setup.currentlySelectedStep&&(e.setup.connectToWin=Math.max(3,e.setup.connectToWin-1))),"enter"===t&&"startRound"===e.setup.currentlySelectedStep?(e.game.nextPhase="playingRound",e.round.nextPhase="start",e.round=Object.assign(Object.assign({},e.round),{boardSize:{width:e.setup.boardWidth,height:e.setup.boardHeight},players:y(w,e.setup.amountOfPlayers),connectToWin:e.setup.connectToWin}),e):e}),P.on("keyPressed",(e,{key:t})=>"playingRound"!==e.game.phase||"end"!==e.round.phase?e:"r"===t?(e.round.nextPhase="start",e.round=Object.assign(Object.assign({},e.round),{boardSize:{width:e.setup.boardWidth,height:e.setup.boardHeight},players:y(w,e.setup.amountOfPlayers),connectToWin:e.setup.connectToWin}),e):"q"===t?(e.game.nextPhase="settingUpGame",e):e),P.on("draw",(e,{context:t})=>(t.clearRect(0,0,p.width,p.height),t.fillStyle="#D7D0FF",t.fillRect(0,0,p.width,p.height),e)),P.on("draw",(e,t)=>("settingUpGame"===e.game.phase&&function(e,{context:t}){j("Set up a new game",{x:p.width/2+.5,y:28},t,"center"),j("Board",{x:150,y:68},t,"right"),j(e.setup.boardHeight+" rows",{x:172,y:68},t),"boardHeight"===e.setup.currentlySelectedStep&&(e.setup.boardHeight>4&&d(a(e,"arrow-left"),t,{x:160,y:68}),e.setup.boardHeight<8&&d(a(e,"arrow-right"),t,{x:230,y:68}));j(e.setup.boardWidth+" columns",{x:172,y:78},t),"boardWidth"===e.setup.currentlySelectedStep&&(e.setup.boardWidth>2&&d(a(e,"arrow-left"),t,{x:160,y:78}),e.setup.boardWidth<18&&d(a(e,"arrow-right"),t,{x:230,y:78}));j("Who's playing?",{x:150,y:98},t,"right"),j(e.setup.amountOfPlayers+" players",{x:172,y:98},t),"amountOfPlayers"===e.setup.currentlySelectedStep&&(e.setup.amountOfPlayers>2&&d(a(e,"arrow-left"),t,{x:160,y:98}),e.setup.amountOfPlayers<7&&d(a(e,"arrow-right"),t,{x:230,y:98}));j("How many to win?",{x:150,y:118},t,"right"),j("connect "+e.setup.connectToWin,{x:172,y:118},t),"connectToWin"===e.setup.currentlySelectedStep&&(e.setup.connectToWin>3&&d(a(e,"arrow-left"),t,{x:160,y:118}),e.setup.connectToWin<8&&d(a(e,"arrow-right"),t,{x:230,y:118}));j("start",{x:172,y:138},t),"startRound"===e.setup.currentlySelectedStep&&d(a(e,"arrow-right"),t,{x:160,y:138})}(e,t),"playingRound"===e.game.phase&&function(e,t){const r=e.round.gameBoard;(function(e,t,r){const n=O(r.round.boardSize);e.tiles.forEach((s,i)=>{s.forEach((o,c)=>{const h={x:n.x+i*g,y:n.y+c*m};d(a(r,"board-position-back"),t,h),0===c&&d(a(r,"board-column-top-front"),t,{x:h.x,y:h.y-8}),c===s.length-1&&d(a(r,"board-column-bottom-front"),t,{x:h.x,y:h.y+m}),0===i&&d(a(r,"board-row-left-front"),t,{x:h.x-8,y:h.y}),i===e.tiles.length-1&&d(a(r,"board-row-right-front"),t,{x:h.x+g,y:h.y}),0===i&&0===c&&d(a(r,"board-corner-top-left-front"),t,{x:h.x-8,y:h.y-8}),i===e.tiles.length-1&&0===c&&d(a(r,"board-corner-top-right-front"),t,{x:h.x+g,y:h.y-8}),i===e.tiles.length-1&&c===s.length-1&&d(a(r,"board-corner-bottom-right-front"),t,{x:h.x+g,y:h.y+m}),0===i&&c===s.length-1&&d(a(r,"board-corner-bottom-left-front"),t,{x:h.x-8,y:h.y+m})})})})(r,t.context,e),function(e,t,r){const n=O(r.round.boardSize);e.tiles.forEach((e,s)=>{e.forEach((e,i)=>{const o={x:n.x+s*g,y:n.y+i*m};null!==e&&d(a(r,"coin-"+e),t,o)})})}(r,t.context,e),function(e,t,r){const n=O(r.round.boardSize);e.tiles.forEach((s,i)=>{s.forEach((s,o)=>{const c={x:n.x+i*g,y:n.y+o*m};d(a(r,"board-position-front"),t,c),0===o&&d(a(r,"board-column-top-back"),t,{x:c.x,y:c.y-8}),0===i&&0===o&&d(a(r,"board-corner-top-left-back"),t,{x:c.x-8,y:c.y-8}),i===e.tiles.length-1&&0===o&&d(a(r,"board-corner-top-right-back"),t,{x:c.x+g,y:c.y-8})})})}(r,t.context,e),"decideMove"===e.round.phase&&function(e,{context:t}){const r=O(e.round.boardSize);d(a(e,"coin-"+e.round.currentPlayer),t,{x:r.x+e.round.positionToPlacePiece*g,y:r.y-Math.floor(1.5*m)})}(e,t);"end"===e.round.phase&&e.round.winner&&function(e,{context:t}){d(a(e,"coin-"+e.round.winner),t,{x:p.width/2-g/2-12,y:4}),j("wins!",{x:p.width/2-2,y:8},t),j("q: set up new game | r: rematch",{x:p.width/2+.5,y:24},t,"center")}(e,t)}(e,t),e)),v.start()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,